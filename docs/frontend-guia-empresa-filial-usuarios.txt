================================================================================
                    GUIA FRONTEND - ESQUEMA DE PERMISS√ïES E MULTITENANCY
================================================================================

üìã SUM√ÅRIO
---------
1. Vis√£o Geral do Sistema
2. Entidades Principais
3. Relacionamentos
4. Endpoints da API
5. Fluxo de Autentica√ß√£o e Autoriza√ß√£o
6. Exemplos de Uso
7. Considera√ß√µes de Seguran√ßa

================================================================================
1. VIS√ÉO GERAL DO SISTEMA
================================================================================

O sistema Ludus Gest√£o utiliza um modelo de MULTITENANCY baseado em:
- EMPRESA (Tenant principal)
- FILIAL (Subdivis√µes da empresa)
- USU√ÅRIOS (Funcion√°rios com permiss√µes espec√≠ficas)
- GRUPOS DE PERMISS√ÉO (Conjuntos de permiss√µes)
- PERMISS√ïES (A√ß√µes espec√≠ficas por m√≥dulo)

Cada usu√°rio pertence a uma EMPRESA e pode ter permiss√µes espec√≠ficas por FILIAL.

================================================================================
2. ENTIDADES PRINCIPAIS
================================================================================

üè¢ EMPRESA (Tenant Principal)
-----------------------------
- ID: Guid
- Nome: string
- CNPJ: string
- Email: string
- Endere√ßo: string
- Cidade: string
- Estado: string
- CEP: string
- Telefone: string
- Situa√ß√£o: Ativo/Inativo
- TenantId: int

üè¢ FILIAL
----------
- ID: Guid
- Nome: string
- C√≥digo: string
- Endere√ßo: string
- Cidade: string
- Estado: string
- CEP: string
- Telefone: string
- Email: string
- CNPJ: string
- Respons√°vel: string
- DataAbertura: DateTime
- Situa√ß√£o: Ativo/Inativo
- EmpresaId: Guid (FK para Empresa)
- TenantId: int

üë§ USU√ÅRIO
-----------
- ID: Guid
- Nome: string
- Email: string
- Telefone: string
- Cargo: string
- EmpresaId: Guid (FK para Empresa)
- GrupoPermissaoId: Guid? (FK para GrupoPermissao)
- Situa√ß√£o: Ativo/Inativo
- √öltimoAcesso: DateTime
- Foto: string? (opcional)
- Senha: string
- TenantId: int

üîê GRUPO DE PERMISS√ÉO
---------------------
- ID: Guid
- Nome: string
- Descri√ß√£o: string
- Situa√ß√£o: Ativo/Inativo
- TenantId: int

üîë PERMISS√ÉO
------------
- ID: Guid
- Nome: string (ex: "Sistema.Acesso")
- Descri√ß√£o: string
- M√≥duloPai: string (ex: "Sistema")
- Subm√≥dulo: string (ex: "")
- A√ß√£o: string (ex: "Acessar")
- Situa√ß√£o: Ativo/Inativo
- TenantId: int

üîó GRUPO PERMISS√ÉO FILIAL
-------------------------
- ID: Guid
- GrupoPermissaoId: Guid (FK para GrupoPermissao)
- FilialId: Guid (FK para Filial)
- Permiss√µes: List<Guid> (IDs das permiss√µes)
- TenantId: int

üîó USU√ÅRIO PERMISS√ÉO FILIAL
---------------------------
- ID: Guid
- UsuarioId: Guid (FK para Usuario)
- FilialId: Guid (FK para Filial)
- Permiss√µes: List<Guid> (IDs das permiss√µes)
- TenantId: int

================================================================================
3. RELACIONAMENTOS
================================================================================

EMPRESA (1) ‚Üê‚Üí (N) FILIAL
- Uma empresa pode ter v√°rias filiais
- Cada filial pertence a uma empresa

EMPRESA (1) ‚Üê‚Üí (N) USU√ÅRIO
- Uma empresa pode ter v√°rios usu√°rios
- Cada usu√°rio pertence a uma empresa

GRUPO PERMISS√ÉO (1) ‚Üê‚Üí (N) USU√ÅRIO
- Um grupo de permiss√£o pode ter v√°rios usu√°rios
- Cada usu√°rio pode pertencer a um grupo (opcional)

GRUPO PERMISS√ÉO (1) ‚Üê‚Üí (N) GRUPO PERMISS√ÉO FILIAL
- Um grupo pode ter permiss√µes espec√≠ficas por filial

USU√ÅRIO (1) ‚Üê‚Üí (N) USU√ÅRIO PERMISS√ÉO FILIAL
- Um usu√°rio pode ter permiss√µes espec√≠ficas por filial

PERMISS√ÉO (N) ‚Üê‚Üí (N) GRUPO PERMISS√ÉO FILIAL
- Muitas permiss√µes podem estar em muitos grupos por filial

PERMISS√ÉO (N) ‚Üê‚Üí (N) USU√ÅRIO PERMISS√ÉO FILIAL
- Muitas permiss√µes podem estar em muitos usu√°rios por filial

================================================================================
4. ENDPOINTS DA API
================================================================================

üîê AUTENTICA√á√ÉO
---------------
POST /api/auth/login
- Body: { "email": "string", "senha": "string" }
- Retorna: Token JWT

POST /api/auth/register
- Body: { "nome": "string", "email": "string", "senha": "string", "empresaId": "guid" }
- Retorna: Token JWT

üè¢ EMPRESAS
-----------
GET /api/empresas
- Lista todas as empresas do tenant atual
- Headers: Authorization: Bearer {token}

GET /api/empresas/{id}
- Obt√©m empresa espec√≠fica
- Headers: Authorization: Bearer {token}

POST /api/empresas
- Cria nova empresa
- Body: CreateEmpresaDTO
- Headers: Authorization: Bearer {token}

PUT /api/empresas/{id}
- Atualiza empresa
- Body: UpdateEmpresaDTO
- Headers: Authorization: Bearer {token}

DELETE /api/empresas/{id}
- Remove empresa
- Headers: Authorization: Bearer {token}

üè¢ FILIAIS
----------
GET /api/filiais
- Lista todas as filiais do tenant atual
- Headers: Authorization: Bearer {token}

GET /api/filiais/{id}
- Obt√©m filial espec√≠fica
- Headers: Authorization: Bearer {token}

POST /api/filiais
- Cria nova filial
- Body: CreateFilialDTO
- Headers: Authorization: Bearer {token}

PUT /api/filiais/{id}
- Atualiza filial
- Body: UpdateFilialDTO
- Headers: Authorization: Bearer {token}

DELETE /api/filiais/{id}
- Remove filial
- Headers: Authorization: Bearer {token}

üë§ USU√ÅRIOS
-----------
GET /api/usuarios
- Lista todos os usu√°rios do tenant atual
- Headers: Authorization: Bearer {token}

GET /api/usuarios/{id}
- Obt√©m usu√°rio espec√≠fico
- Headers: Authorization: Bearer {token}

POST /api/usuarios
- Cria novo usu√°rio
- Body: CreateUsuarioDTO
- Headers: Authorization: Bearer {token}

PUT /api/usuarios/{id}
- Atualiza usu√°rio
- Body: UpdateUsuarioDTO
- Headers: Authorization: Bearer {token}

DELETE /api/usuarios/{id}
- Remove usu√°rio
- Headers: Authorization: Bearer {token}

üîê GRUPOS DE PERMISS√ÉO
----------------------
GET /api/grupos-permissoes
- Lista todos os grupos de permiss√£o do tenant atual
- Headers: Authorization: Bearer {token}

GET /api/grupos-permissoes/{id}
- Obt√©m grupo espec√≠fico
- Headers: Authorization: Bearer {token}

POST /api/grupos-permissoes
- Cria novo grupo
- Body: CreateGrupoPermissaoDTO
- Headers: Authorization: Bearer {token}

PUT /api/grupos-permissoes/{id}
- Atualiza grupo
- Body: UpdateGrupoPermissaoDTO
- Headers: Authorization: Bearer {token}

DELETE /api/grupos-permissoes/{id}
- Remove grupo
- Headers: Authorization: Bearer {token}

üîë PERMISS√ïES
-------------
GET /api/permissoes
- Lista todas as permiss√µes do tenant atual
- Headers: Authorization: Bearer {token}

GET /api/permissoes/{id}
- Obt√©m permiss√£o espec√≠fica
- Headers: Authorization: Bearer {token}

üîó GRUPO PERMISS√ÉO FILIAL
-------------------------
GET /api/grupos-permissoes-filiais
- Lista grupos de permiss√£o por filial
- Headers: Authorization: Bearer {token}

POST /api/grupos-permissoes-filiais
- Associa permiss√µes a grupo por filial
- Body: { "grupoPermissaoId": "guid", "filialId": "guid", "permissoes": ["guid1", "guid2"] }
- Headers: Authorization: Bearer {token}

üîó USU√ÅRIO PERMISS√ÉO FILIAL
---------------------------
GET /api/usuarios-permissoes-filiais
- Lista permiss√µes de usu√°rio por filial
- Headers: Authorization: Bearer {token}

POST /api/usuarios-permissoes-filiais
- Associa permiss√µes a usu√°rio por filial
- Body: { "usuarioId": "guid", "filialId": "guid", "permissoes": ["guid1", "guid2"] }
- Headers: Authorization: Bearer {token}

================================================================================
5. FLUXO DE AUTENTICA√á√ÉO E AUTORIZA√á√ÉO
================================================================================

1. LOGIN
   - Usu√°rio faz login com email/senha
   - Sistema retorna JWT token com claims do usu√°rio

2. VERIFICA√á√ÉO DE PERMISS√ïES
   - Frontend inclui token no header Authorization
   - Backend valida token e extrai informa√ß√µes do usu√°rio
   - Sistema verifica permiss√µes do usu√°rio para a a√ß√£o solicitada

3. FILTROS DE TENANT
   - Todas as consultas s√£o automaticamente filtradas por TenantId
   - Usu√°rio s√≥ v√™ dados da sua empresa

4. VERIFICA√á√ÉO POR FILIAL
   - Para a√ß√µes espec√≠ficas de filial, sistema verifica se usu√°rio tem permiss√£o
   - Permiss√µes podem ser por grupo ou individuais

================================================================================
6. EXEMPLOS DE USO
================================================================================

üìù EXEMPLO 1: Login e Obter Dados do Usu√°rio
--------------------------------------------
```javascript
// Login
const response = await fetch('/api/auth/login', {
  method: 'POST',
  headers: { 'Content-Type': 'application/json' },
  body: JSON.stringify({
    email: 'admin@empresa.com',
    senha: 'senha123'
  })
});

const { token } = await response.json();

// Salvar token
localStorage.setItem('token', token);

// Obter dados do usu√°rio
const userResponse = await fetch('/api/usuarios/me', {
  headers: { 'Authorization': `Bearer ${token}` }
});
```

üìù EXEMPLO 2: Listar Filiais da Empresa
---------------------------------------
```javascript
const filiaisResponse = await fetch('/api/filiais', {
  headers: { 'Authorization': `Bearer ${token}` }
});

const filiais = await filiaisResponse.json();
// Retorna apenas filiais da empresa do usu√°rio logado
```

üìù EXEMPLO 3: Verificar Permiss√£o
---------------------------------
```javascript
// Verificar se usu√°rio pode criar reservas na filial X
const hasPermission = await checkPermission('Reserva.Criar', filialId);

async function checkPermission(permissionName, filialId) {
  const response = await fetch(`/api/permissoes/check?permission=${permissionName}&filialId=${filialId}`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  return response.ok;
}
```

üìù EXEMPLO 4: Criar Usu√°rio com Grupo de Permiss√£o
--------------------------------------------------
```javascript
const newUser = {
  nome: 'Jo√£o Silva',
  email: 'joao@empresa.com',
  senha: 'senha123',
  telefone: '(11) 99999-9999',
  cargo: 'Gerente',
  empresaId: empresaId,
  grupoPermissaoId: grupoAdminId
};

const response = await fetch('/api/usuarios', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${token}`
  },
  body: JSON.stringify(newUser)
});
```

================================================================================
7. CONSIDERA√á√ïES DE SEGURAN√áA
================================================================================

üîí MULTITENANCY
---------------
- Cada empresa tem seu pr√≥prio TenantId
- Dados s√£o automaticamente isolados por tenant
- Usu√°rio s√≥ acessa dados da sua empresa

üîí AUTORIZA√á√ÉO
--------------
- Todas as rotas (exceto login/register) requerem token JWT
- Permiss√µes s√£o verificadas por a√ß√£o e filial
- Sistema suporta permiss√µes granulares

üîí VALIDA√á√ÉO
------------
- Todos os DTOs t√™m valida√ß√£o no backend
- Dados s√£o sanitizados antes de salvar
- Valida√ß√£o de tenant em todas as opera√ß√µes

üîí AUDITORIA
------------
- Todas as entidades t√™m DataCriacao e DataAtualizacao
- Sistema registra altera√ß√µes importantes
- Logs de acesso e opera√ß√µes cr√≠ticas

================================================================================
8. ESTRUTURA DE PERMISS√ïES SUGERIDA
================================================================================

üìã M√ìDULOS PRINCIPAIS
---------------------
- Sistema (configura√ß√µes gerais)
- Empresas (gest√£o de empresas)
- Filiais (gest√£o de filiais)
- Usu√°rios (gest√£o de usu√°rios)
- Clientes (gest√£o de clientes)
- Locais (gest√£o de locais)
- Reservas (gest√£o de reservas)
- Receb√≠veis (gest√£o financeira)
- Relat√≥rios (visualiza√ß√£o de relat√≥rios)

üìã A√á√ïES B√ÅSICAS
----------------
- Acessar (visualizar)
- Criar (adicionar novo)
- Editar (modificar existente)
- Excluir (remover)
- Exportar (baixar dados)
- Aprovar (aprovar/rejeitar)

üìã EXEMPLO DE PERMISS√ïES
------------------------
- Sistema.Acesso
- Empresa.Visualizar
- Empresa.Criar
- Empresa.Editar
- Empresa.Excluir
- Filial.Visualizar
- Filial.Criar
- Filial.Editar
- Filial.Excluir
- Usuario.Visualizar
- Usuario.Criar
- Usuario.Editar
- Usuario.Excluir
- Cliente.Visualizar
- Cliente.Criar
- Cliente.Editar
- Cliente.Excluir
- Local.Visualizar
- Local.Criar
- Local.Editar
- Local.Excluir
- Reserva.Visualizar
- Reserva.Criar
- Reserva.Editar
- Reserva.Excluir
- Reserva.Aprovar
- Recebivel.Visualizar
- Recebivel.Criar
- Recebivel.Editar
- Recebivel.Excluir
- Relatorio.Visualizar
- Relatorio.Exportar

================================================================================
9. CONFIGURA√á√ÉO INICIAL
================================================================================

üîÑ SEED DE DADOS
----------------
O sistema j√° vem com dados iniciais configurados:

1. Empresa: "Ludus Gest√£o"
2. Filial: "Filial Matriz"
3. Cliente: "Cliente Exemplo"
4. Local: "Sala de Reuni√£o"
5. Permiss√£o: "Sistema.Acesso"
6. Grupo de Permiss√£o: "Administrador"
7. Usu√°rio: "Administrador" (admin@ludusgestao.com.br / admin123)
8. Reserva: Reserva de teste
9. Receb√≠vel: Receb√≠vel de teste

üîß CONFIGURA√á√ÉO DE GRUPOS
-------------------------
1. Administrador: Acesso total ao sistema
2. Gerente: Acesso a gest√£o de opera√ß√µes
3. Operador: Acesso b√°sico para opera√ß√µes
4. Visualizador: Apenas visualiza√ß√£o

================================================================================
10. BOAS PR√ÅTICAS PARA O FRONTEND
================================================================================

‚úÖ GEST√ÉO DE ESTADO
-------------------
- Armazenar token JWT no localStorage
- Manter dados do usu√°rio logado em estado global
- Cachear permiss√µes do usu√°rio

‚úÖ INTERFACE
------------
- Mostrar/ocultar elementos baseado em permiss√µes
- Desabilitar bot√µes para a√ß√µes n√£o permitidas
- Feedback visual para a√ß√µes restritas

‚úÖ NAVEGA√á√ÉO
------------
- Filtrar menu baseado em permiss√µes
- Redirecionar usu√°rios sem permiss√£o
- Breadcrumbs para navega√ß√£o

‚úÖ VALIDA√á√ÉO
------------
- Valida√ß√£o client-side para melhor UX
- Valida√ß√£o server-side obrigat√≥ria
- Mensagens de erro claras

‚úÖ SEGURAN√áA
------------
- Nunca confiar apenas na valida√ß√£o client-side
- Sempre enviar token em requisi√ß√µes
- Logout autom√°tico em token expirado

================================================================================
FIM DO GUIA
================================================================================

Para d√∫vidas ou suporte, consulte a documenta√ß√£o da API ou entre em contato com a equipe de desenvolvimento. 